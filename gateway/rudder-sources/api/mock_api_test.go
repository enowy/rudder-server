// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	sql "database/sql"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rudderlabs/rudder-server/gateway/rudder-sources/model"
)

// MockSourcesService is a mock of SourcesService interface.
type MockSourcesService struct {
	ctrl     *gomock.Controller
	recorder *MockSourcesServiceMockRecorder
}

// MockSourcesServiceMockRecorder is the mock recorder for MockSourcesService.
type MockSourcesServiceMockRecorder struct {
	mock *MockSourcesService
}

// NewMockSourcesService creates a new mock instance.
func NewMockSourcesService(ctrl *gomock.Controller) *MockSourcesService {
	mock := &MockSourcesService{ctrl: ctrl}
	mock.recorder = &MockSourcesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcesService) EXPECT() *MockSourcesServiceMockRecorder {
	return m.recorder
}

// AddFailedRecords mocks base method.
func (m *MockSourcesService) AddFailedRecords(ctx context.Context, tx sql.Tx, jobRunId string, key model.JobFilter, records []json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailedRecords", ctx, tx, jobRunId, key, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFailedRecords indicates an expected call of AddFailedRecords.
func (mr *MockSourcesServiceMockRecorder) AddFailedRecords(ctx, tx, jobRunId, key, records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailedRecords", reflect.TypeOf((*MockSourcesService)(nil).AddFailedRecords), ctx, tx, jobRunId, key, records)
}

// Delete mocks base method.
func (m *MockSourcesService) Delete(ctx context.Context, jobId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, jobId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSourcesServiceMockRecorder) Delete(ctx, jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSourcesService)(nil).Delete), ctx, jobId)
}

// GetFailedRecords mocks base method.
func (m *MockSourcesService) GetFailedRecords(ctx context.Context, tx sql.Tx, jobRunId string, filter model.JobFilter) (model.FailedRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedRecords", ctx, tx, jobRunId, filter)
	ret0, _ := ret[0].(model.FailedRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedRecords indicates an expected call of GetFailedRecords.
func (mr *MockSourcesServiceMockRecorder) GetFailedRecords(ctx, tx, jobRunId, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedRecords", reflect.TypeOf((*MockSourcesService)(nil).GetFailedRecords), ctx, tx, jobRunId, filter)
}

// GetStatus mocks base method.
func (m *MockSourcesService) GetStatus(ctx context.Context, jobId string, jobFilter model.JobFilter) (model.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, jobId, jobFilter)
	ret0, _ := ret[0].(model.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSourcesServiceMockRecorder) GetStatus(ctx, jobId, jobFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSourcesService)(nil).GetStatus), ctx, jobId, jobFilter)
}

// IncrementStats mocks base method.
func (m *MockSourcesService) IncrementStats(ctx context.Context, tx sql.Tx, jobRunId string, key model.JobFilter, stats model.Stats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementStats", ctx, tx, jobRunId, key, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementStats indicates an expected call of IncrementStats.
func (mr *MockSourcesServiceMockRecorder) IncrementStats(ctx, tx, jobRunId, key, stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementStats", reflect.TypeOf((*MockSourcesService)(nil).IncrementStats), ctx, tx, jobRunId, key, stats)
}
